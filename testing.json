"scripts": {
    "start:dev": "webpack serve --config webpack.dev.js --open --hot",
    "start:prod": "webpack serve --config webpack.prod.js --open",
    "build": "webpack --config webpack.prod.js --progress",
    "analyze": "mkdir dist 2>nul && webpack --config webpack.prod.js --profile --json > dist/stats.json && webpack-bundle-analyzer dist/stats.json ",
    "lint": "eslint src/**/*.{ts,tsx} --quiet --fix",
    "test": "jest --runInBand --detectOpenHandles --forceExit"
  },


  config
  import HtmlWebpackPlugin from 'html-webpack-plugin';
import path from 'path';
import TsconfigPathsPlugin from 'tsconfig-paths-webpack-plugin';
import {Configuration} from 'webpack';
import webpack from 'webpack';
import type {Configuration as DevServerConfiguration} from 'webpack-dev-server';

const devServer: DevServerConfiguration = {
  port: 3001,
  open: true,
  historyApiFallback: true,
};

const config: Configuration = {
  entry: path.join(__dirname, 'src/index.tsx'),
  output: {
    path: path.join(__dirname, 'build'),
    filename: '[name].[contenthash].js',
    clean: true,
    chunkFilename: '[name].[contenthash].js',
  },
  optimization: {
    chunkIds: 'named',
    usedExports: true,
  },
  resolve: {
    extensions: ['.ts', '.tsx', '.js'],
    plugins: [
      new TsconfigPathsPlugin({
        configFile: path.join(__dirname, 'tsconfig.json'),
      }),
    ],
  },
  devServer,
  devtool: 'eval-source-map',
  plugins: [
    new HtmlWebpackPlugin({
      template: path.join(__dirname, 'public/index.html'),
    }),
    new webpack.DefinePlugin({
      'process.env.NODE_ENV': JSON.stringify('development'),
    }),
  ],
  module: {
    rules: [
      {
        test: /\.tsx?$/,
        loader: 'ts-loader',
        options: {
          transpileOnly: true,
        },
        exclude: /build/,
      },
    ],
  },
};

export default config;

dev

import HtmlWebpackPlugin from 'html-webpack-plugin';
import path from 'path';
import TsconfigPathsPlugin from 'tsconfig-paths-webpack-plugin';
import {Configuration} from 'webpack';
import webpack from 'webpack';
import type {Configuration as DevServerConfiguration} from 'webpack-dev-server';

const devServer: DevServerConfiguration = {
  port: 3001,
  open: true,
  historyApiFallback: true,
};

const config: Configuration = {
  entry: path.join(__dirname, 'src/index.tsx'),
  output: {
    path: path.join(__dirname, 'build'),
    filename: '[name].[contenthash].js',
    clean: true,
    chunkFilename: '[name].[contenthash].js',
  },
  optimization: {
    chunkIds: 'named',
    usedExports: true,
  },
  resolve: {
    extensions: ['.ts', '.tsx', '.js'],
    plugins: [
      new TsconfigPathsPlugin({
        configFile: path.join(__dirname, 'tsconfig.json'),
      }),
    ],
  },
  devServer,
  devtool: 'eval-source-map',
  plugins: [
    new HtmlWebpackPlugin({
      template: path.join(__dirname, 'public/index.html'),
    }),
    new webpack.DefinePlugin({
      'process.env.NODE_ENV': JSON.stringify('development'),
    }),
  ],
  module: {
    rules: [
      {
        test: /\.tsx?$/,
        loader: 'ts-loader',
        options: {
          transpileOnly: true,
        },
        exclude: /build/,
      },
    ],
  },
};

export default config;